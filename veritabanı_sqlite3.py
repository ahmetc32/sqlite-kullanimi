# -*- coding: utf-8 -*-
"""Veritabanı_SQLite3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LrPTPaVTNYGdgpOfhOLZ1dRkvZnkr-6r

**Veritabanı Kullanımı**

* SQLite3 modülü Python 2.5 sürümünden beri desteklenmektedir. Küçük, basit ve hızlı bir veritabanıdır.
* SQLite veritabanını görsel olarak incelemek ve manuel işlem yapmak için SQLite DB Browser https://sqlitebrowser.org/dl/
"""

import sqlite3

# veritabanı bağlantısı, eğer veri.db isimli bir veritabanı yoksa oluşturur
baglanti = sqlite3.connect("data.db")

# veritabanı üzerinde işlem yapmak için cursor oluşturma
imlec = baglanti.cursor()

"""**CRUD işlemleri** (Create - Read - Update - Delete)"""

# CREATE tablo oluşturma
imlec.execute("""CREATE TABLE ogrenciler(ogr_no INTEGER ,ogr_adi TEXT,ogr_soyadi TEXT,ogr_bolum TEXT, puan INTEGER)""")

# CREATE TABLE IF NOT EXISTS      eğer tablo mevcut değil ise oluştur
 imlec.execute("""CREATE TABLE IF NOT EXISTS ogrenciler(ogr_no INTEGER ,ogr_adi TEXT,ogr_soyadi TEXT,ogr_bolum TEXT, puan INTEGER)""")

# INSERT tabloya kayıt ekleme
imlec.execute("""INSERT INTO ogrenciler VALUES(54,"Arda","TUNCA","Bilgisayar Mühendisliği",45) """)
imlec.execute("""INSERT INTO ogrenciler VALUES(22,"Ceren","Bylms","Bilgisayar Mühendisliği",95) """)
imlec.execute("""INSERT INTO ogrenciler VALUES(39,"Ceylin","Bylms","Yazılım Mühendisliği",75) """)
imlec.execute("""INSERT INTO ogrenciler VALUES(34,"Kuzey","Komsu","Yazılım Mühendisliği",50) """)

# veritabanında yapılan değişiklikleri kaydetme
baglanti.commit()

# veritabanı kapatma
baglanti.close()

# veritabanı kapatma işleminin otomatik yapılması
with sqlite3.connect("data.db") as baglanti :
 
    imlec = baglanti.cursor()
    imlec.execute("""CREATE TABLE IF NOT EXISTS ogrenciler(ogr_no INTEGER ,ogr_adi TEXT,ogr_soyadi TEXT,ogr_bolum TEXT, puan INTEGER)""")
    imlec.execute("""INSERT INTO ogrenciler VALUES(11,"Ali","CAN","Yazılım Mühendisliği",75) """)
    baglanti.commit()

# READ okuma işlemi
# SELECT *FROM tablo_adı         * tablodan tüm alanları oku demektir

imlec.execute("""SELECT *FROM ogrenciler""")

# 1 - fetchall() Metodu ile tablodaki tüm verileri okuma
# 2 - fetchmany() Metodu ile tablodan istenilen kadar veriyi okur
# 3 - fetchone()  Meotodu ile tablodan veriler tek tek okunur
kayit = imlec.fetchall()
print(kayit)

for ogrenci in kayit:
    print(ogrenci)

#Tablodan belirli alanları okuma
imlec.execute("""SELECT ogr_adi, ogr_soyadi FROM ogrenciler""")
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# Tablodan belirli bir şartı sağlayan veriyi okuyalım
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_bolum = 'Bilgisayar Mühendisliği' """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# Tablodan birden fazla şartı sağlayan veriyi okuyalım
# Mantıksal Operatörler AND, OR, NOT
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_no >35 AND ogr_bolum = 'Bilgisayar Mühendisliği' """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# Tablodan birden fazla şartı sağlayan veriyi okuyalım
# IN, NOT IN Operatörler
#imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_no = 34 OR ogr_no = 39 """)
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_no IN (34,39) """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# BETWEEN Operatörü
#imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_no >25 AND ogr_no < 40 """)
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_no BETWEEN 25 AND 40 """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# LIKE, NOT LIKE Operatörü
# Karakter türü alanları üzerinde istenilen karakterlerin sorgulanmasını sağlayan komutlardır. 
# Anahtar kelime/harf ile birlikte çoğunlukla % işareti kullanılır
# Adı C ile başlayan öğrenciler
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_adi like "C%" """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# Adında e geçen öğrenciler  % anahtar kelime %
#imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_adi like "%e%" """)
# Adında e geçmeyen öğrenciler
imlec.execute("""SELECT *FROM ogrenciler WHERE ogr_adi not like "%e%" """)
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# ORDER BY ile kayıtların sıralanması ASC (Ascending = Artan)  DESC (Descending = Azalan)
imlec.execute("SELECT * FROM ogrenciler order by ogr_adi desc")
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# DISTINCT 
# Tablolarda belirli alanlarda tekrar eden veriler (birden fazla kayıt) olabilir
#imlec.execute("SELECT DISTINCT ogr_adi FROM ogrenciler order by ogr_adi desc")
imlec.execute("SELECT DISTINCT * FROM ogrenciler order by ogr_adi desc")
ogrenciler = imlec.fetchall()
 
for ogrenci in ogrenciler:
    print(ogrenci)

# KÜMELEME FONKSİYONLARI
# SUM, AVG, MIN, MAX, COUNT, 
imlec.execute("SELECT AVG (puan) FROM ogrenciler")
ogrenciler = imlec.fetchone()
print(ogrenciler)

imlec.execute("SELECT MAX (puan) FROM ogrenciler")
ogrenciler = imlec.fetchall()
print(ogrenciler)

# kayıt sayısını bulma
imlec.execute("SELECT Count (*) FROM ogrenciler")
#imlec.execute("SELECT Count (*) as sayi FROM ogrenciler")
# farklı isimlere sahip kayıt sayısı
#imlec.execute("SELECT Count (distinct ogr_adi) FROM ogrenciler")
ogrenciler = imlec.fetchall()
print(ogrenciler)

# Group By Deyimi
imlec.execute("SELECT ogr_bolum, Count (*) FROM ogrenciler group by ogr_bolum")
ogrenciler = imlec.fetchall()
print(ogrenciler)

# Having Sözcüğü
# Gruplanmış verilerde filtreleme sağlar
# her bölümdeki ortalama puanları 50'nin üzerinde olan bölümleri listele
imlec.execute("SELECT ogr_bolum, avg(puan) FROM ogrenciler group by ogr_bolum having avg(puan) > 50 ")
#imlec.execute("SELECT ogr_bolum, count(*) FROM ogrenciler group by ogr_bolum having count(*) > 1 ")
ogrenciler = imlec.fetchall()
print(ogrenciler)

# Alias Kullanma   as  
# Sütun ya da tablolara kullanıcıların yeni (kısaltma, anlaşılır) isim verme işlemi
# kayıt sayısını bulma
imlec.execute("SELECT Count (*) as sayi FROM ogrenciler")
ogrenciler = imlec.fetchall()
print(ogrenciler)

# UPDATE veri güncelleme işlemi
# UPDATE tablo_adi SET = sütun1 = yeni_değer, sütun2 = yeni_değer WHERE koşul
imlec.execute("""UPDATE ogrenciler SET ogr_no = 34 WHERE ogr_bolum = 'Bilgisayar Mühendisliği' """)

imlec.execute("""SELECT *FROM ogrenciler""")
kayit = imlec.fetchall()
for ogrenci in kayit:
    print(ogrenci)

# Öğrencilerin puanına 5 ekle
imlec.execute("""UPDATE ogrenciler SET puan=puan+5 """)

# DELETE ile veri silme işlemi
# DELETE FROM tablo_adi WHERE koşul
imlec.execute("""DELETE FROM ogrenciler WHERE ogr_bolum = 'Bilgisayar Mühendisliği' """)

# Adı K harfi ile başlayan öğrencileri silin
imlec.execute("""DELETE FROM ogrenciler WHERE ogr_adi like "%e%" """)

# Tüm tabloyu sil
imlec.execute("""DELETE FROM ogrenciler""")

"""Tabloların Birleştirilmesi (Çoklu Tablo)"""

# CREATE TABLE IF NOT EXISTS      eğer tablo mevcut değil ise oluştur
imlec.execute("""CREATE TABLE IF NOT EXISTS ders (no INTEGER ,ders_adi TEXT)""")

# INSERT tabloya kayıt ekleme
imlec.execute("""INSERT INTO ders values (54, "Python")""")

sqlifadesi=("""INSERT INTO ders (no, ders_adi) VALUES(?, ?) """)

numara=int(input("Öğrenci No: "))
ders_adi=input("Ders Adi: ")

sqldeger=(numara, ders_adi)

imlec.execute(sqlifadesi,sqldeger)

imlec.execute("""SELECT *FROM ders""")
dersler = imlec.fetchall()
 
for ders in dersler:
    print(ders)

# Tablo birleştirme
imlec.execute("""SELECT *FROM ogrenciler, ders where ogrenciler.ogr_no = ders.no""")
oku = imlec.fetchall()
 
for i in oku:
    print(i)

# Alias Kullanma   as  
# Sütun ya da tablolara kullanıcıların yeni (kısaltma, anlaşılır) isim verme işlemi
imlec.execute("""SELECT ogr.ogr_no, ogr.ogr_adi, ogr.ogr_bolum, d.ders_adi FROM ogrenciler as ogr, ders as d where ogr.ogr_no = d.no""")
oku = imlec.fetchall()
 
for i in oku:
    print(i)

# İç içe SQL (nested SQL)
imlec.execute("""SELECT *FROM ogrenciler where ogr_no IN (SELECT no FROM ders where  no>25)""")
oku = imlec.fetchall()
 
for i in oku:
    print(i)

